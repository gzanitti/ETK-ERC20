# Function selector
# -----------------

# Load 32 bytes of call data
push1 0			                                        # [0]
calldataload			                                # [selector32b]
push1 224		                                        # [224, selector32b]
shr		      	                                        # [selector]


# Jump table                                            TODO: optimize this (alphanumeric order, view functions last, etc.)
# ----------
dup1                                                    # [selector, selector]
push4 selector("name()")                                # ["name()", selector, selector]
eq                                                      # [selector == "name()", selector]
%push(name)                                             # [name, selector == "name()", selector]
jumpi                                                   # [selector] jump to name label if selector == "name()", otherwise continue

dup1                                                    # [selector, selector]
push4 selector("symbol()")                              # ["symbol()", selector, selector]
eq                                                      # [selector == "symbol()", selector]
%push(symbol)                                           # [symbol, selector == "symbol()", selector]
jumpi                                                   # [selector] jump to symbol label if selector == "symbol()", otherwise continue

dup1                                                    # [selector, selector]
push4 selector("decimals()")                            # ["decimals()", selector, selector]
eq                                                      # [selector == "decimals()", selector]
%push(decimals)                                         # [decimals, selector == "decimals()", selector]
jumpi                                                   # [selector] jump to decimals label if selector == "decimals()", otherwise continue

dup1                                                    # [selector, selector]
push4 selector("totalSupply()")                         # ["totalSupply()", selector, selector]
eq                                                      # [selector == "totalSupply()", selector]
%push(totalSupply)                                      # [totalSupply, selector == "totalSupply()", selector]
jumpi                                                   # [selector] jump to totalSupply label if selector == "totalSupply()", otherwise continue

dup1                                                    # [selector, selector]
push4 selector("balanceOf(address)")                    # ["balanceOf(address)", selector, selector]
eq                                                      # [selector == "balanceOf(address)", selector]
%push(balanceOf)                                        # [balanceOf, selector == "balanceOf(address)", selector]
jumpi                                                   # [selector] jump to balanceOf label if selector == "balanceOf(address)", otherwise continue

dup1                                                    # [selector, selector]
push4 selector("transfer(address,uint256)")             # ["transfer(address,uint256)", selector, selector]
eq                                                      # [selector == "transfer(address,uint256)", selector]
%push(transfer)                                         # [transfer, selector == "transfer(address,uint256)", selector]
jumpi                                                   # [selector] jump to transfer label if selector == "transfer(address,uint256)", otherwise continue

dup1                                                    # [selector, selector]
push4 selector("transferFrom(address,address,uint256)") # ["transferFrom(address,address,uint256)", selector, selector]
eq                                                      # [selector == "transferFrom(address,address,uint256)", selector]
%push(transferFrom)                                     # [transferFrom, selector == "transferFrom(address,address,uint256)", selector]
jumpi                                                   # [selector] jump to transferFrom label if selector == "transferFrom(address,address,uint256)", otherwise continue

dup1                                                    # [selector, selector]
push4 selector("approve(address,uint256)")              # ["approve(address,uint256)", selector, selector]
eq                                                      # [selector == "approve(address,uint256)", selector]
%push(approve)                                          # [approve, selector == "approve(address,uint256)", selector]
jumpi                                                   # [selector] jump to approve label if selector == "approve(address,uint256)", otherwise continue

dup1                                                    # [selector, selector]
push4 selector("allowance(address,address)")            # ["allowance(address,address)", selector, selector]
eq                                                      # [selector == "allowance(address,address)", selector]
%push(allowance)                                        # [allowance, selector == "allowance(address,address)", selector]
jumpi                                                   # [selector] jump to allowance label if selector == "allowance(address,address)", otherwise continue

# Invalid function selector
# -------------------------
fail:
jumpdest
push1 0                                                 # [0, selector]
push1 0                                                 # [0, 0, selector]
revert                                                  # [selector]

name:                                                   # name() public view returns (string)
jumpdest
push1 0                                                 # [0, selector]
sload                                                   # [name, selector]
push1 0                                                 # [0, name, selector]
mstore                                                  # [selector] {(0:31, name)}
push1 32                                                # [32, selector] {(0:31, name)}
push1 0                                                 # [0, 32, selector] {(0:31, name)}
return                                                  

symbol:                                                 # symbol() public view returns (string)
jumpdest
push1 1                                                 # [1, selector]
sload                                                   # [symbol, selector]
push1 0                                                 # [0, symbol, selector]
mstore                                                  # [selector] {(0:31, symbol)}
push1 32                                                # [32, selector] {(0:31, symbol)}
push1 0                                                 # [0, 32, selector] {(0:31, symbol)}
return

decimals:                                               # decimals() public view returns (uint8)
jumpdest
push1 2                                                 # [2, selector]
sload                                                   # [decimals, selector]
push1 0                                                 # [0, decimals, selector]
mstore                                                  # [selector] {(0:31, decimals)}
push1 32                                                # [32, selector] {(0:31, decimals)}
push1 0                                                 # [0, 32, selector] {(0:31, decimals)}
return

totalSupply:                                            # totalSupply() public view returns (uint256)
jumpdest
push1 3                                                 # [3, selector]
sload                                                   # [totalSupply, selector]
push1 0                                                 # [0, totalSupply, selector]
mstore                                                  # [selector] {(0:31, totalSupply)}
push1 32                                                # [32, selector] {(0:31, totalSupply)}
push1 0                                                 # [0, 32, selector] {(0:31, totalSupply)}
return

balanceOf:                                              # balanceOf(address _owner) public view returns (uint256 balance)
jumpdest
push1 4                                                 # [4, selector]
calldataload                                            # [_owner32, selector]
push1 0                                                 # [0, _owner32, selector]
mstore                                                  # [selector] {(0:31, _owner32)}
push1 32                                                # [32, selector] {(0:31, _owner32)}
push1 0                                                 # [0, 32, selector] {(0:31, _owner32)}
keccak256                                               # [hash, selector]
sload                                                   # [balance, selector] 
push1 0                                                 # [0, balance, selector]
mstore                                                  # [selector] {(0:31, balance)}
push1 32                                                # [32, selector] {(0:31, balance)}
push1 0                                                 # [0, 32, selector] {(0:31, balance)}
return

transfer:                                               # transfer(address _to, uint256 _value) public returns (bool success)
jumpdest
caller                                                  # [caller, selector]
push1 0                                                 # [0, caller, selector]
mstore                                                  # [selector] {(0:31, caller)}
push1 32                                                # [32, selector] {(0:31, caller)}
push1 0                                                 # [0, 32, selector] {(0:31, caller)}
keccak256                                               # [hash, selector]
dup1                                                    # [hash, hash, selector]
sload                                                   # [balance, hash, selector]
push1 36                                                # [36, balance, hash, selector]
calldataload                                            # [_value32, balance, hash, selector]
dup2                                                    # [balance, _value32, balance, hash, selector]
dup2                                                    # [_value32, balance, _value32, balance, hash, selector]
gt                                                      # [_value32 > balance, _value32, balance, hash, selector]
%push(fail)                                             # [fail, _value32 > balance, _value32, balance, hash, selector]
jumpi                                                   # [_value32, balance, hash, selector] jump to fail label if _value32 > balance, otherwise continue

push1 4                                                 # [4, _value32, balance, hash, selector]
calldataload                                            # [_to32, _value32, balance, hash, selector]
push1 0                                                 # [0, _to32, _value32, balance, hash, selector]
mstore                                                  # [_value32, balance, hash, selector] {(0:31, _to32)}
push1 32                                                # [32, _value32, balance, hash, selector] {(0:31, _to32)}
push1 0                                                 # [0, 32, _value32, balance, hash, selector] {(0:31, _to32)}
keccak256                                               # [to_hash, _value32, balance, hash, selector] {(0:31, _to32)}
dup1                                                    # [to_hash, to_hash, _value32, balance, hash, selector] 
sload                                                   # [to_balance, to_hash, _value32, balance, hash, selector] 
dup3                                                    # [_value32, to_balance, to_hash, _value32, balance, hash, selector] 
add                                                     # [_value32 + to_balance, to_hash, _value32, balance, hash, selector]
swap1                                                   # [to_hash, _value32 + to_balance, _value32, balance, hash, selector]
sstore                                                  # [_value32, balance, hash, selector]

swap1                                                   # [balance, _value32, hash, selector]
sub                                                     # [balance - _value32, hash, selector]
swap1                                                   # [hash, balance - _value32, selector]
sstore                                                  # [selector]

push32 1                                                # [1, selector]
push1 0                                                 # [0, 1, selector]
mstore                                                  # [selector] {(0:31, 1)}
push1 32                                                # [32, selector] {(0:31, 1)}
push1 0                                                 # [0, 32, selector] {(0:31, 1)}
return

transferFrom:                                           # transferFrom(address _from, address _to, uint256 _value) public returns (bool success)
jumpdest

push1 32
push1 0
return

approve:                                                # approve(address _spender, uint256 _value) public returns (bool success)
jumpdest
caller                                                  # [caller, selector]
push1 0                                                 # [0, caller, selector]
mstore                                                  # [selector] {(0:31, caller)}
push1 36                                                # [36, selector] {(0:31, caller)}
calldataload                                            # [_value, selector] {(0:31, caller)}
push1 4                                                 # [4, _value, selector] {(0:31, caller)}
calldataload                                            # [_spender32, _value, selector] {(0:31, caller)}
push1 32                                                # [32, _spender32, _value, selector] {(0:31, caller)}
mstore                                                  # [_value, selector] {(0:31, caller), (32:63, _spender32)}
push1 0                                                 # [0, _value, selector] {(0:31, caller), (32:63, _spender32)}
push1 64                                                # [64, 0, _value, selector] {(0:31, caller), (32:63, _spender32)}
keccak256                                               # [hash, _value, selector]
sstore                                                  # [selector]

push32 1                                                # [1, selector]
push1 0                                                 # [0, 1, selector]
mstore                                                  # [selector] {(0:31, 1)}
push1 32                                                # [32, selector] {(0:31, 1)}
push1 0                                                 # [0, 32, selector] {(0:31, 1)}
return

allowance:                                              # allowance(address _owner, address _spender) public view returns (uint256 remaining)
jumpdest
push1 4                                                 # [4, selector]
calldataload                                            # [_owner32, selector]
push1 0                                                 # [0, _owner32, selector]
mstore                                                  # [selector] {(0:31, _owner32)}
push1 36                                                # [36, selector] {(0:31, _owner32)}
calldataload                                            # [_spender32, selector] {(0:31, _owner32)}
push1 31                                                # [32, _spender32, selector] {(0:31, _owner32)}
mstore                                                  # [selector] {(0:31, _owner32), (32:63, _spender32)}
push1 0                                                 # [0, selector] {(0:31, _owner32), (32:63, _spender32)}
push1 64                                                # [64, 0, selector] {(0:31, _owner32), (32:63, _spender32)}
keccak256                                               # [hash, selector]
sload                                                   # [remaining, selector]
push1 0                                                 # [0, remaining, selector]
mstore                                                  # [selector] {(0:31, remaining)}
push1 32                                                # [32, selector] {(0:31, remaining)}
push1 0                                                 # [0, 32, selector] {(0:31, remaining)}
return

